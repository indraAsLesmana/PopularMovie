<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="id.co.blogspot.tutor93.popularmovie">

    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.READ_SYNC_STATS"/>
    <!-- Required to enable our SyncAdapter after it's created. -->
    <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS"/>
    <!-- Required because we're manually creating a new account. -->
    <uses-permission android:name="android.permission.AUTHENTICATE_ACCOUNTS"/>


    <application
        android:name=".PopularMovie"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity
            android:name=".moviehome.MovieHomeActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".moviedetail.MovieDetailActivity"/>
        <activity
            android:name=".videoplayer.VideoPlayerYoutube"
            android:theme="@style/Theme.customDialog" />

        <!-- ContentProvider to store feed data.

       The "authorities" here are defined as part of a ContentProvider interface. It's used here
       as an attachment point for the SyncAdapter. See res/xml/syncadapter.xml and
       SyncService.java.

       Since this ContentProvider is not exported, it will not be accessible outside of this app's
       package. -->
        <provider
            android:name=".data.local.MovieProvider"
            android:authorities="id.co.blogspot.tutor93.popularmovie"
            android:exported="false" />

        <!-- This service implements our SyncAdapter. It needs to be exported, so that the system
        sync framework can access it. -->
        <service android:name=".data.local.MovieSyncService"
            android:exported="true">
            <!-- This intent filter is required. It allows the system to launch our sync service
            as needed. -->
            <intent-filter>
                <action android:name="android.content.SyncAdapter" />
            </intent-filter>
            <!-- This points to a required XML file which describes our SyncAdapter. -->
            <meta-data android:name="android.content.SyncAdapter"
                android:resource="@xml/syncadapter" />
        </service>

        <!-- This implements the account we'll use as an attachment point for our SyncAdapter. Since
       our SyncAdapter doesn't need to authenticate the current user (it just fetches a public RSS
       feed), this account's implementation is largely empty.

       It's also possible to attach a SyncAdapter to an existing account provided by another
       package. In that case, this element could be omitted here. -->
        <service android:name=".data.local.MovieGenericAccountService">
            <!-- Required filter used by the system to launch our account service. -->
            <intent-filter>
                <action android:name="android.accounts.AccountAuthenticator" />
            </intent-filter>
            <!-- This points to an XMLf ile which describes our account service. -->
            <meta-data android:name="android.accounts.AccountAuthenticator"
                android:resource="@xml/authenticator" />
        </service>

    </application>

</manifest>